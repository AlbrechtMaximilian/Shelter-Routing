import pandas as pd
import matplotlib
matplotlib.use('TkAgg')  # <-- Fix fÃ¼r PyCharm
import matplotlib.pyplot as plt

def evaluate_results(results_excel_path):
    """
    Visualizes average objective value and runtime per scenario from the results Excel file.

    Args:
        results_excel_path (str): Path to the Excel file generated by `run_experiments`.
    """
    # Load results
    df = pd.read_excel(results_excel_path)

    # Group by scenarioID + description
    grouped = df.groupby(['scenarioID', 'scenario_description']).agg({
        'obj heuristic': 'mean',
        'obj optimal': 'mean',
        'time heuristic': 'mean',
        'time optimal': 'mean'
    }).reset_index()

    # Plot Objective Values
    plt.figure(figsize=(12, 5))
    plt.title("Average Objective Value per Scenario")
    plt.bar(grouped['scenarioID'] - 0.2, grouped['obj heuristic'], width=0.4, label='Heuristic', color='skyblue')
    plt.bar(grouped['scenarioID'] + 0.2, grouped['obj optimal'], width=0.4, label='Optimal', color='salmon')
    plt.xticks(grouped['scenarioID'], grouped['scenario_description'], rotation=45, ha='right')
    plt.ylabel("Objective Value")
    plt.grid(True, axis='y', linestyle='--', alpha=0.5)
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Plot Runtime
    plt.figure(figsize=(12, 5))
    plt.title("Average Computation Time per Scenario")
    plt.bar(grouped['scenarioID'] - 0.2, grouped['time heuristic'], width=0.4, label='Heuristic', color='skyblue')
    plt.bar(grouped['scenarioID'] + 0.2, grouped['time optimal'], width=0.4, label='Optimal', color='salmon')
    plt.xticks(grouped['scenarioID'], grouped['scenario_description'], rotation=45, ha='right')
    plt.ylabel("Time (s)")
    plt.grid(True, axis='y', linestyle='--', alpha=0.5)
    plt.legend()
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    evaluate_results("instances_20250526_143435/experiment_results.xlsx")